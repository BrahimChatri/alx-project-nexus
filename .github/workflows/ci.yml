name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_job_board
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install coverage pytest pytest-django pytest-cov requests

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_job_board" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "ENCRYPTION_KEY=test-encryption-key" >> $GITHUB_ENV
    
    - name: Run Django migrations
      working-directory: ./backend
      run: |
        python manage.py migrate --no-input

    - name: Populate test data
      working-directory: ./backend
      run: |
        python manage.py populate_data

    - name: Run Django unit tests
      working-directory: ./backend
      run: |
        python manage.py test --verbosity=2

    - name: Run tests with coverage
      working-directory: ./backend
      run: |
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml

    - name: Start Django server for integration tests
      working-directory: ./backend
      run: |
        python manage.py runserver &
        sleep 10

    - name: Run integration tests from tests/ directory
      run: |
        python tests/test_api.py
        python tests/test_media_upload.py
        python tests/test_remember_me.py

    - name: Stop Django server
      run: |
        pkill -f runserver || true

    - name: Run linting with flake8
      working-directory: ./backend
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      working-directory: ./backend
      run: |
        pip install black
        black --check --diff . || echo "Code formatting check completed"

    - name: Security check with bandit
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r . -x tests/ || echo "Security check completed"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
